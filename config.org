#+title: Emacs Configuration
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el :mkdirp yes

* Basics first
#+begin_src emacs-lisp
  (setq inhibit-startup-message t) ; no thank you
  (scroll-bar-mode -1) ; no scrollbar
  (tool-bar-mode -1) ; no toolbar
  (tooltip-mode -1) ; no tooltip
  (set-fringe-mode 10) ; I don't remember
  (menu-bar-mode -1) ; no menu
#+end_src
* Global keybindings
#+begin_src emacs-lisp
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
  ; (global-set-key (kbd "C-M-j") 'counsel-switch-buffer)
#+end_src
* Configure use-package
#+begin_src emacs-lisp
  (require 'package)
  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("org" . "https://orgmode.org/elpa/")
                           ("elpha" . "https://elpa.gnu.org/packages/")))
  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))

  (require 'use-package)

  (setq use-package-always-ensure t)
#+end_src
* Consult
I don't know what's that
#+begin_src emacs-lisp
    (use-package consult
      :hook (completion-list-mode . consult-preview-at-point-mode)

      :init
      (setq register-preview-delay 0.5
	    register-preview-function #'consult-register-format)

      ;; Optionally tweak the register preview window.
      ;; This adds thin lines, sorting and hides the mode line of the window.
      (advice-add #'register-preview :override #'consult-register-window)

      ;; Use Consult to select xref locations with preview
      (setq xref-show-xrefs-function #'consult-xref
	    xref-show-definitions-function #'consult-xref)

      ;; Configure other variables and modes in the :config section,
      ;; after lazily loading the package.
      :config

      ;; Optionally configure preview. The default value
      ;; is 'any, such that any key triggers the preview.
      (setq consult-preview-key 'any)
      ;; (setq consult-preview-key "M-.")
      ;; (setq consult-preview-key '("S-<down>" "S-<up>"))
      ;; For some commands and buffer sources it is useful to configure the
      ;; :preview-key on a per-command basis using the `consult-customize' macro.
      (consult-customize
       consult-ripgrep consult-git-grep consult-grep
       consult-bookmark consult-recent-file consult-xref
       consult--source-bookmark consult--source-file-register
       consult--source-recent-file consult--source-project-recent-file

      ;; Optionally configure the narrowing key.
      ;; Both < and C-+ work reasonably well.
      (setq consult-narrow-key "<") ;; "C-+"

      ;; Optionally make narrowing help available in the minibuffer.
      ;; You may want to use `embark-prefix-help-command' or which-key instead.
      ;; (keymap-set consult-narrow-map (concat consult-narrow-key " ?") #'consult-narrow-help)
    ))
#+end_src

* Evil
** Core
#+begin_src emacs-lisp
  (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    (setq evil-split-window-below t)
    (setq evil-vsplit-window-right t)
    (setq evil-undo-system 'undo-redo)

    :config
    (evil-mode 1)

    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)

    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)
    (evil-define-key '(normal visual) 'global "gc" #'evilnc-comment-operator)

    (evil-set-initial-state 'messages-buffer-mode 'normal))

  (define-prefix-command 'leader-map)

  (keymap-set evil-motion-state-map "SPC" 'leader-map)
  (keymap-set evil-normal-state-map "SPC" 'leader-map)

  (evil-define-key nil leader-map
    ;; PROJECT (p)
    "pf" 'projectile-find-file
    "ps" 'projectile-shell-command
    "pp" 'projectile-switch-project

    ;; Search (s)
    "sb" 'swiper
    "sB" 'swiper-all
    "sd" 'counsel-rg
    "sf" 'locate)
#+end_src
** Collections
#+begin_src emacs-lisp
  (use-package evil-collection
    :after evil
    :ensure t
    :custom
    (evil-collection-want-find-usages-bindings t)
    (evil-collection-setup-minibuffer t)
    :config
    (evil-collection-init))
#+end_src
** Comment
#+begin_src emacs-lisp
  (use-package evil-nerd-commenter
    :after evil
    :bind
    ([remap comment-line] . #'evilnc-comment-or-uncomment-lines))
#+end_src
* UI
** Set some face attributes
#+begin_src emacs-lisp
  (set-face-attribute 'default nil :font "Fira Code" :height 105)
  (set-face-attribute 'fixed-pitch nil :font "Fira Code" :height 105)
  (set-face-attribute 'variable-pitch nil :font "Cantarell" :height 105 :weight 'regular)
#+end_src
** Themes
#+begin_src emacs-lisp
  (use-package doom-themes
    :init
    (load-theme 'doom-plain t))
#+end_src
** Enable some global modes
#+begin_src emacs-lisp
  (column-number-mode)
  (global-display-line-numbers-mode t)

  ; disable line numbers on certain modes
  (dolist (mode '(org-mode-hook
                term-mode-hook
                eshell-mode-hook
                treemacs-mode-hook
                shell-mode-hook
                vterm-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode 0))))

#+end_src

** Ivy & Counsel config
#+begin_src emacs-lisp
  (use-package ivy
    :diminish
    :defer
    :bind (("C-s" . swiper)
           :map ivy-minibuffer-map
           ("TAB" . ivy-alt-done)
           ("C-l" . ivy-alt-done)
           ("C-j" . ivy-next-line)
           ("C-k" . ivy-previous-line)
           :map ivy-switch-buffer-map
           ("C-k" . ivy-previous-line)
           ("C-l" . ivy-done)
           ("C-d" . ivy-switch-buffer-kill)
           :map ivy-reverse-i-search-map
           ("C-k" . ivy-previous-line)
           ("C-d" . ivy-reverse-i-search-kill))
    :config
    (ivy-mode 1))

  (use-package ivy-rich
    :init
    (ivy-rich-mode 1))

  (use-package counsel
    :bind (:map minibuffer-local-map
                ("C-r" . 'counsel-minibuffer-history))
    :config (counsel-mode 1)
    (setq ivy-initial-inputs-alist nil)) ;; no ^
#+end_src

** all-the-icons
#+begin_src emacs-lisp
  (use-package all-the-icons)
#+end_src

** doom-modeline
nice looking status bar
#+begin_src emacs-lisp
  (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode 1)
    :custom (doom-modeline-height 15))
#+end_src

** rainbow-delimiters
you already know why
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

** which-key
#+begin_src emacs-lisp
  (use-package which-key
    :init (which-key-mode)
    :diminish
    :config
    (setq which-key-idle-delay 0.3))
#+end_src

**  Helpful
#+begin_src emacs-lisp
  (use-package helpful
    :commands (helpful-callable helpful-variable helpful-command helpful-key)
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))
#+end_src

** Ligature
#+begin_src emacs-lisp
  (use-package ligature
    :config
    (ligature-set-ligatures 't '("www"))
    (ligature-set-ligatures 'eww-mode '("ff" "fi" "ffi"))
    (ligature-set-ligatures 't
                          '(("=" (rx (+ (or ">" "<" "|" "/" "~" ":" "!" "="))))
                            (";" (rx (+ ";")))
                            ("&" (rx (+ "&")))
                            ("!" (rx (+ (or "=" "!" "\." ":" "~"))))
                            ("?" (rx (or ":" "=" "\." (+ "?"))))
                            ("%" (rx (+ "%")))
                            ("|" (rx (+ (or ">" "<" "|" "/" ":" "!" "}" "\]"
                                            "-" "=" ))))
                            ("\\" (rx (or "/" (+ "\\"))))
                            ("+" (rx (or ">" (+ "+"))))
                            (":" (rx (or ">" "<" "=" "//" ":=" (+ ":"))))
                            ("/" (rx (+ (or ">"  "<" "|" "/" "\\" "\*" ":" "!"
                                            "="))))
                            ("\." (rx (or "=" "-" "\?" "\.=" "\.<" (+ "\."))))
                            ("-" (rx (+ (or ">" "<" "|" "~" "-"))))
                            ("*" (rx (or ">" "/" ")" (+ "*"))))
                            ("w" (rx (+ "w")))
                            ("<" (rx (+ (or "\+" "\*" "\$" "<" ">" ":" "~"  "!"
                                            "-"  "/" "|" "="))))
                            (">" (rx (+ (or ">" "<" "|" "/" ":" "=" "-"))))
                            ("#" (rx (or ":" "=" "!" "(" "\?" "\[" "{" "_(" "_"
                                         (+ "#"))))
                            ("~" (rx (or ">" "=" "-" "@" "~>" (+ "~"))))
                            ("_" (rx (+ (or "_" "|"))))
                            ("0" (rx (and "x" (+ (in "A-F" "a-f" "0-9")))))
                            "Fl"  "Tl"  "fi"  "fj"  "fl"  "ft"
                            "{|"  "[|"  "]#"  "(*"  "}#"  "$>"  "^="))
    (global-ligature-mode t))
#+end_src

** Projectile
#+begin_src emacs-lisp
  (use-package projectile
    :diminish projectile-mode
    :config (projectile-mode)
    :bind-keymap
    ("C-c p" . projectile-command-map)
    :init
    (when (file-directory-p "~/Documents/dev")
      (setq projectile-project-search-path '("~/Documents/dev")))
    (setq projectile-switch-project-action #'projectile-dired))

  (use-package counsel-projectile
    :config (counsel-projectile-mode))
#+end_src

** Magit
#+begin_src emacs-lisp
  (use-package magit
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))
#+end_src
** Treemacs
#+begin_src emacs-lisp
  (use-package treemacs
    :defer t)

  (use-package treemacs-projectile
    :after treemacs)
#+end_src
* LSP
** Language Servers
*** lsp-mode
#+begin_src emacs-lisp
  (defun bw/lsp-mode-setup ()
    ;; (setq lsp-headerline-breadcumbs-segments '(path-up-to-project file symbols))
    ;; (lsp-headerline-breadcrumb-mode)
    (lsp-headerline-breadcrumb-mode -1))


  (use-package lsp-mode
    :commands (lsp lsp-deferred)
    :hook (lsp-mode . bw/lsp-mode-setup)
    :init
    (setq lsp-keymap-prefix "C-c l")
    :config
    (define-key evil-normal-state-map (kbd "g r") #'lsp-find-references)
    (lsp-enable-which-key-integration t)
    :custom
    (lsp-headerline-breadcrumb-enable nil))
#+end_src
*** lsp-ui
#+begin_src emacs-lisp
  (use-package lsp-ui
    :hook (lsp-mode . lsp-ui-mode)
    :custom
    (lsp-ui-doc-position 'bottom)
    (lsp-ui-sideline-show-diagnostics t))
#+end_src
*** lsp-treemacs
#+begin_src emacs-lisp
  (use-package lsp-treemacs
    :after lsp)
#+end_src
*** lsp-ivy
#+begin_src emacs-lisp
  (use-package lsp-ivy)
#+end_src
** Languages
*** TS 
#+begin_src emacs-lisp
  (use-package typescript-mode
    :mode "\\.ts\\'"
    :hook (typescript-mode . lsp-deferred)
    :config
    (setq typescript-indent-level 2))
#+end_src
*** Haskell
#+begin_src emacs-lisp
  (use-package lsp-mode
    :ensure t
    :hook ((haskell-mode . lsp-deferred))
    :commands (lsp lsp-deferred))

  (use-package lsp-haskell
    :custom
    (lsp-haskell-server-path "haskell-language-server-wrapper"))
#+end_src
*** direnv
#+begin_src emacs-lisp
  (use-package envrc
    :hook (after-init . envrc-global-mode))
#+end_src
*** Nix
#+begin_src emacs-lisp
  (use-package lsp-nix
    :ensure lsp-mode
    :after (lsp-mode)
    :demand t
    :custom
    (lsp-nix-nil-formatter ["alejandra"])
    (lsp-nix-nil-auto-eval-inputs nil))

  (use-package nix-mode
    :hook (nix-mode . lsp-deferred)
    :ensure t)
  
#+end_src
*** Haxe
#+begin_src emacs-lisp
  (use-package haxe-mode
    :mode "\\.hx\\'"
    :hook (haxe-mode . lsp-deferred))
#+end_src
** Flycheck
#+begin_src emacs-lisp
  (use-package flycheck
    :ensure t
    :config
    (add-hook 'after-init-hook #'global-flycheck-mode))
#+end_src
** Company Mode
#+begin_src emacs-lisp
  (use-package company
    :after lsp-mode
    :hook (lsp-mode . company-mode)
    :bind (:map company-active-map
           ("<tab>" . company-complete-selection))
          (:map lsp-mode-map
           ("<tab>" . company-indent-or-complete-common))
    :custom
    (company-minimum-prefix-length 1)
    (company-idle-delay 0.0))

  (use-package company-box
    :hook (company-mode . company-box-mode))
#+end_src
* Org mode
** Setup functions
#+begin_src emacs-lisp
(defun bw/org-mode-setup ()
    (org-indent-mode)
    (variable-pitch-mode 1)
    (auto-fill-mode 0))

(defun bw/org-font-setup ()
    ;; Replace list hyphen with dot
    (font-lock-add-keywords 'org-mode
                            '(("^ *\\([-]\\) "
                            (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))
#+end_src
**  Set faces for heading levels
#+begin_src emacs-lisp
  (dolist (face '((org-level-1 . 1.2)
                  (org-level-2 . 1.1)
                  (org-level-3 . 1.05)
                  (org-level-4 . 1.0)
                  (org-level-5 . 1.1)
                  (org-level-6 . 1.1)
                  (org-level-7 . 1.1)
                  (org-level-8 . 1.1)))
    (set-face-attribute (car face) nil :font "Cantarell" :weight 'regular :height (cdr face)))
#+end_src
** Change specific faces
#+begin_src emacs-lisp
  (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
  (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-table nil   :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch)
  (set-face-attribute 'org-block-end-line nil :background "transparent"))
#+end_src
** Main setup function
#+begin_src emacs-lisp
  (use-package org
    :hook (org-mode . bw/org-mode-setup)
    :config
    (setq org-ellipsis " ▾"
          org-hide-emphasis-markers t)

    (setq org-agenda-start-with-log-mode t)
    (setq org-log-done 'time)
    (setq org-log-into-drawer t)

    (setq org-todo-keywords
          '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!)")))

    (require 'org-habit)
    (add-to-list 'org-modules 'org-habit)
    (setq org-habit-graph-column 60)

    (setq org-agenda-files
          '("~/Documents/org/tasks.org"))
    (bw/org-font-setup))
#+end_src
** Set common tags
#+begin_src emacs-lisp
  (setq org-tag-alist
  '((:startgroup)
      ; Put mutually exclusive tags here
      (:endgroup)
      ("@errand" . ?E)
      ("@home" . ?H)
      ("@work" . ?W)
      ("agenda" . ?a)
      ("planning" . ?p)
      ("publish" . ?P)
      ("batch" . ?b)
      ("note" . ?n)
      ("idea" . ?i)))
#+end_src
**  Refile
#+begin_src emacs-lisp
  (setq org-refile-targets
  '(("Archive.org" :maxlevel . 1)
      ("Tasks.org" :maxlevel . 1)))

  (advice-add 'org-refile :after 'org-save-all-org-buffers)
#+end_src
** org-capture-templates
#+begin_src emacs-lisp
  (setq org-capture-templates
  `(("t" "Tasks / Projects")
      ("tt" "Task" entry (file+olp "tasks.org" "Inbox")
          "* TODO %?\n  %U\n  %a\n  %i" :empty-lines 1)

      ("j" "Journal Entries")
      ("jj" "Journal" entry
          (file+olp+datetree "journal.org")
          "\n* %<%I:%M %p> - Journal :journal:\n\n%?\n\n"
          :clock-in :clock-resume
          :empty-lines 1)
      ("jm" "Meeting" entry
          (file+olp+datetree "journal.org")
          "* %<%I:%M %p> - %a :meetings:\n\n%?\n\n"
          :clock-in :clock-resume
          :empty-lines 1)

      ("w" "Workflows")
      ("we" "Checking Email" entry (file+olp+datetree "journal.org")
          "* Checking Email :email:\n\n%?" :clock-in :clock-resume :empty-lines 1)

      ("m" "Metrics Capture")
      ("mw" "Weight" table-line (file+headline "metrics.org" "Weight")
      "| %U | %^{Weight} | %^{Notes} |" :kill-buffer t)))
#+end_src
** org-bullets
#+begin_src emacs-lisp
  (use-package org-bullets
    :after org
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))
#+end_src
** Visual fill column
this centers the text by adding padding to the right and left
#+begin_src emacs-lisp
  (defun bw/org-mode-visual-fill ()
    (setq visual-fill-column-width 100
          visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

  (use-package visual-fill-column
    :hook (org-mode . bw/org-mode-visual-fill))
#+end_src
** Babel
*** Load languages
#+begin_src emacs-lisp
  (org-babel-do-load-languages
    'org-babel-load-languages
    '((emacs-lisp . t)
      (python . t)))

  (setq org-confirm-babel-evalute nil)
#+end_src
*** Setup templates
#+begin_src emacs-lisp
  (require 'org-tempo)

  (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("py" . "src python"))
#+end_src
*** Auto tangle
#+begin_src emacs-lisp
  (defun bw/org-babel-tangle-config ()
    (when (string-equal (buffer-file-name)
                        (expand-file-name "~/emacs-config/config.org"))
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'bw/org-babel-tangle-config)))
#+end_src
* Terminals
** term-mode
#+begin_src emacs-lisp
  (use-package term
    :config
    (setq explicit-shell-file-name "fish"))
    ; (setq term-prompt-regexp "^[^#$%>\n]*[#$%>] *")
#+end_src
***  Better color support
#+begin_src emacs-lisp
  (use-package eterm-256color
    :hook (term-mode . eterm-256color-mode))
#+end_src
** vterm
#+begin_src emacs-lisp
  (use-package vterm
    :commands vterm
    :config
    ;; (setq term-prompt-regexp "^[^#$%>\n]*[#$%>] *") 
    (setq vterm-shell "fish")              
    (setq vterm-max-scrollback 10000))

#+end_src
** eshell
#+begin_src emacs-lisp
  (defun efs/configure-eshell ()
    ;; Save command history when commands are entered
    (add-hook 'eshell-pre-command-hook 'eshell-save-some-history)

    ;; Truncate buffer for performance
    (add-to-list 'eshell-output-filter-functions 'eshell-truncate-buffer)

    ;; Bind some useful keys for evil-mode
    (evil-define-key '(normal insert visual) eshell-mode-map (kbd "C-r") 'counsel-esh-history)
    (evil-define-key '(normal insert visual) eshell-mode-map (kbd "<home>") 'eshell-bol)
    (evil-normalize-keymaps)

    (setq eshell-history-size         10000
          eshell-buffer-maximum-lines 10000
          eshell-hist-ignoredups t
          eshell-scroll-to-bottom-on-input t))

  (use-package eshell-git-prompt)

  (use-package eshell
    :hook (eshell-first-time-mode . efs/configure-eshell)
    :config

    (with-eval-after-load 'esh-opt
      (setq eshell-destroy-buffer-when-process-dies t)
      (setq eshell-visual-commands '("htop" "zsh" "vim"))))

#+end_src
